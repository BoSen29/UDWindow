<#
.SYNOPSIS
    Sample control for UniversalDashboard.
.DESCRIPTION
    Sample control function for UniversalDashboard. This function must have an ID and return a hash table.
.PARAMETER Id
    An id for the component default value will be generated by new-guid.
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    Inputs (if any)
.OUTPUTS
    Output (if any)
.NOTES
    General notes
#>
function New-UDDrag {
    param(
        [Parameter()]
        [string]$Id = (New-Guid).ToString(),
        [Parameter()]
        [string]$Title,
        [Parameter()]
        [int]$X = 0,
        [Parameter()]
        [int]$Y = 0,
        [Parameter()]
        [scriptblock]$Content,
        # Minimized size in px
        [Parameter(
            Mandatory = $false
        )]
        [int]
        $MinimizedSize = 200,
        [Parameter()]
        [object]$OnClose
    )
    Begin {
        if ($null -ne $OnClose) {
            if ($OnClose -is [scriptblock]) {
                $OnClose = New-UDEndpoint -Endpoint $OnClose -Id $Id
            }
            elseif ($OnClose -isnot [UniversalDashboard.Models.Endpoint]) {
                throw "OnClick must be a script block or UDEndpoint"
            }
        }
    }

    End {

        @{
            # The AssetID of the main JS File
            assetId         = $AssetId
            # Tell UD this is a plugin
            isPlugin        = $true
            # This ID must be the same as the one used in the JavaScript to register the control with UD
            type            = "UD-Drag"
            # An ID is mandatory
            id              = $Id

            # This is where you can put any other properties. They are passed to the React control's props
            # The keys are case-sensitive in JS.
            title           = $Title
            x               = $X
            y               = $Y
            content         = $Content.Invoke()
            minimizedSize   = $MinimizedSize
            onClose         = $onClose.Name
        }

    }
}
